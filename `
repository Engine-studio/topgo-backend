use actix_web_dev::error::{
    Result,
    ErrorType,
    ApiError,
};
use diesel::sql_types::Array;
use serde::{Serialize, Deserialize};
use diesel::prelude::*;
use diesel::pg::PgConnection;
use super::*;
use reqwest;

use crate::schema::{
    restaurants,
};

#[derive(Serialize,Deserialize,Clone,Queryable,Identifiable)]
#[table_name = "restaurants"]
#[primary_key(id)]
pub struct Restaurants {
    pub id: i64,
    pub name: String,
    pub address: String,
    pub phone: String,
    pub pass_hash: String,
    pub location_lat: f64,
    pub location_lng: f64,
    pub working_from: Vec<chrono::NaiveTime>,
    pub working_till: Vec<chrono::NaiveTime>,
    pub is_working: bool,
    pub is_deleted: bool,
    pub creation_datetime: chrono::NaiveDateTime,
}

#[derive(Serialize,Deserialize,Clone,AsChangeset,Queryable,Identifiable)]
#[table_name = "restaurants"]
#[primary_key(id)]
pub struct UpdateRestaurants {
    pub id: i64,
    pub address: Option<String>,
    pub name: Option<String>,
}

#[derive(Serialize,Deserialize,Clone)]
pub struct NewRestaurant {
    pub name: String,
    pub address: String,
    pub phone: String,
    pub password: String,
    pub working_from: Vec<chrono::NaiveTime>,
    pub working_till: Vec<chrono::NaiveTime>,
}

impl Restaurants {
    pub async fn new(
        creds: &NewRestaurant, 
        id: i64,
        conn: &PgConnection,
    ) -> Result<()> {
        use serde_json::Value;
        //let req: Vec<String> = creds.address.split_whitespace();
        //let req = req.join("+"); //let req = "https://maps.googleapis.com/maps/api/geocode/json?address={}&key={}"
        //let req = "https://maps.googleapis.com/maps/api/geocode/json?address={}&key={}" .await?
          //  .json()
         //   .await?;
        diesel::insert_into(restaurants::table)
            .values(&(
                restaurants::id.eq(&id),
                restaurants::name.eq(&creds.name),
                restaurants::phone.eq(&creds.phone),
                restaurants::pass_hash.eq(make_hash(&creds.password)),
                restaurants::location_lng.eq(37.168950),
                restaurants::location_lat.eq(55.979094),
                restaurants::working_from.eq(&creds.working_from),
                restaurants::working_till.eq(&creds.working_till),
            ))
            .execute(conn)?;
        Ok(())
    }

    pub async fn from_id(
        id: i64,
        conn: &PgConnection,
    ) -> Result<Self> {
        let r = restaurants::table
            .filter(restaurants::id.eq(id))
            .filter(restaurants::is_deleted.eq(false))
            .get_result::<Self>(conn)?;
        Ok(r)
    }

    pub async fn get(
        creds: &AuthData,
        conn: &PgConnection,
    ) -> Result<Self> {
        let pass_hash = make_hash(&creds.password);
        let r = restaurants::table
            .filter(restaurants::phone.eq(&creds.phone))
            .filter(restaurants::pass_hash.eq(pass_hash))
            .filter(restaurants::is_deleted.eq(false))
            .get_result::<Self>(conn)?;
        Ok(r)
    }

    pub async fn set(
        instance: &UpdateRestaurants,
        conn: &PgConnection,
    ) -> Result<Self> {
        let r = diesel::update(restaurants::table
            .filter(restaurants::id.eq(instance.id)))
            .set(instance)
            .get_result::<Self>(conn)?;
        Ok(r)
    }

    pub async fn delete(
        id: i64,
        conn: &PgConnection,
    ) -> Result<()> {
        diesel::update(restaurants::table
            .filter(restaurants::id.eq(id)))
            .set(
                restaurants::is_deleted.eq(true)
            )
            .execute(conn)?;
        Ok(())
    }

    pub async fn get_all(
        conn: &PgConnection,
    ) -> Result<Vec<Self>> {
        let r = restaurants::table
            .filter(restaurants::is_deleted.eq(false))
            .get_results(conn)?;
        Ok(r)
    }
}

use diesel::sql_types::*;
use crate::enum_types::*;
#[derive(Serialize,Deserialize,Clone,QueryableByName)]
pub struct RestaurantsInfo {
    #[sql_type="Bigint"]
    pub order_id: i64,
    #[sql_type="Varchar"]
    pub client_phone: String,
    #[sql_type="Varchar"]
    pub client_comment: String,
    #[sql_type="Bigint"]
    pub order_price: i64,
    #[sql_type="Varchar"]
    pub details: String,
    #[sql_type="Time"]
    pub cooking_time: chrono::NaiveTime,
    #[sql_type="Double"]
    pub address_lat: f64,
    #[sql_type="Double"]
    pub address_lng: f64,
    #[sql_type="Varchar"]
    pub delivery_address: String,
    #[sql_type="Bool"]
    pub is_big_order: bool,
    #[sql_type="Orderstatus"]
    pub status: OrderStatus,
    #[sql_type="Paymethod"]
    pub method: PayMethod,
    #[sql_type="Bigint"]
    pub courier_id: i64,
    #[sql_type="Varchar"]
    pub courier_name: String,
    #[sql_type="Varchar"]
    pub courier_surname: String,
    #[sql_type="Varchar"]
    pub courier_patronymic: String,
    #[sql_type="Varchar"]
    pub courier_phone: String,
    #[sql_type="Bigint"]
    pub courier_rate_amount: i64,
    #[sql_type="Bigint"]
    pub courier_rate_count: i64,
    #[sql_type="Varchar"]
    pub courier_picture: String,
    #[sql_type="Bigint"]
    pub restaurant_id: i64,
}

impl RestaurantsInfo {
    pub async fn get_by(
        restaurant_id: i64,
        conn: &PgConnection,
    ) -> Result<Vec<Self>> {
        let r = diesel::sql_query("SELECT * FROM restaurant_info WHERE restaurant_id=$1;") 
            .bind::<Bigint,_>(restaurant_id)
            .get_results(conn)?;
        Ok(r)
    }
}
